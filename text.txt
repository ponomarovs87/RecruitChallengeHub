В чём отличие хранения данных в local storage от куки

в куки данные хранятся до окончания сессии(конец сессии: закрытие вкладки или браузера) в локал сторажде хранится пока не поступит приказ удалить эти данные строго привязан к адресу сайта.

Какие бывают хуки

useState: Позволяет функциональным компонентам React использовать состояние.
useEffect: Позволяет выполнять побочные эффекты в функциональных компонентах. Например, работа с данными из API, подписка на события и т.д.
useContext: Позволяет функциональным компонентам получать доступ к контексту React.
useReducer: Предоставляет альтернативный способ управления состоянием в функциональных компонентах.
useCallback: Возвращает мемоизированную версию колбэка, который изменяется только, если изменяются одна или несколько из его зависимостей.
useMemo: Позволяет мемоизировать вычислительно затратные значения, чтобы они не пересчитывались при каждом рендере компонента.
useRef: Позволяет функциональным компонентам иметь доступ к DOM-узлам или другим значениям, которые сохраняются между рендерами.
useImperativeHandle: Позволяет функциональным компонентам изменять значение, которое передается в родительский компонент при использовании ref.
useLayoutEffect: Этот хук аналогичен useEffect, но вызывается синхронно после всех изменений DOM. Используется для выполнения манипуляций DOM, которые требуют рассчетов перед тем, как пользователь увидит изменения.
useDebugValue: Позволяет отображать дополнительную информацию о пользовательском хуке в инструментах разработчика.


Расскажи про области видимости

Глобальная область видимости: Переменные, объявленные вне всех функций, имеют глобальную область видимости и могут быть доступны из любой части программы.

javascript
Copy code
var globalVar = 10;

function myFunction() {
    console.log(globalVar); // Можно обратиться к глобальной переменной
}
Локальная область видимости: Переменные, объявленные внутри функции, имеют локальную область видимости и доступны только внутри этой функции.

javascript
Copy code
function myFunction() {
    var localVar = 20;
    console.log(localVar); // Можно обратиться к локальной переменной
}

console.log(localVar); // Ошибка: переменная не определена
Область видимости блока: С появлением стандарта ECMAScript 6 (ES6), JavaScript также получил область видимости переменных, ограниченную блоком (через let и const).

javascript
Copy code
if (true) {
    var x = 10; // Глобальная область видимости
    let y = 20; // Область видимости блока
    const z = 30; // Область видимости блока
}

console.log(x); // Выведет 10
console.log(y); // Ошибка: переменная недоступна
console.log(z); // Ошибка: переменная недоступна
Область видимости в JavaScript важна для понимания того, как работает код и какие переменные доступны в разных частях программы.